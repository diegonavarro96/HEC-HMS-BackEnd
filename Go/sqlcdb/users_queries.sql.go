// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users_queries.sql

package sqlcdb

import (
	"context"
	"time"
)

const addUser = `-- name: AddUser :exec
INSERT INTO public."Users" (
    "firstName",
    "lastName",
    username,
    email,
    role,
    organization_id
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type AddUserParams struct {
	FirstName      string `json:"firstName"`
	LastName       string `json:"lastName"`
	Username       string `json:"username"`
	Email          string `json:"email"`
	Role           string `json:"role"`
	OrganizationID int32  `json:"organization_id"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.exec(ctx, q.addUserStmt, addUser,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Email,
		arg.Role,
		arg.OrganizationID,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM public."Users"
WHERE email = $1
`

func (q *Queries) DeleteUser(ctx context.Context, email string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, email)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    u.id,
    u.username,
    u.email,
    u."firstName",
    u."lastName",
    u.role,
    u.organization_id,
    o.name AS organization_name,
    u.created_at,
    u.updated_at
FROM public."Users" u
JOIN public.organizations o ON u.organization_id = o.id
WHERE u.email = $1
LIMIT 1
`

type GetUserByEmailRow struct {
	ID               int32     `json:"id"`
	Username         string    `json:"username"`
	Email            string    `json:"email"`
	FirstName        string    `json:"firstName"`
	LastName         string    `json:"lastName"`
	Role             string    `json:"role"`
	OrganizationID   int32     `json:"organization_id"`
	OrganizationName string    `json:"organization_name"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.OrganizationID,
		&i.OrganizationName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT 
    id, 
    username, 
    email 
FROM 
    public."Users"
`

type GetUsersRow struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByOrganizationAndRole = `-- name: GetUsersByOrganizationAndRole :many
SELECT
    u.id,
    u.username,
    u.email,
    u."firstName",
    u."lastName",
    u.role,
    u.organization_id,
    o.name AS organization_name,
    u.created_at,
    u.updated_at
FROM public."Users" u
JOIN public.organizations o ON u.organization_id = o.id
WHERE 
    u.organization_id = $1
    AND (
        CASE u.role
            WHEN 'superUser' THEN 3
            WHEN 'admin' THEN 2
            WHEN 'editor' THEN 1
            ELSE 0
        END
    ) <= (
        CASE $2
            WHEN 'superUser' THEN 3
            WHEN 'admin' THEN 2
            WHEN 'editor' THEN 1
            ELSE 0
        END
    )
ORDER BY u.email
`

type GetUsersByOrganizationAndRoleParams struct {
	OrganizationID int32  `json:"organization_id"`
	Role           string `json:"role"`
}

type GetUsersByOrganizationAndRoleRow struct {
	ID               int32     `json:"id"`
	Username         string    `json:"username"`
	Email            string    `json:"email"`
	FirstName        string    `json:"firstName"`
	LastName         string    `json:"lastName"`
	Role             string    `json:"role"`
	OrganizationID   int32     `json:"organization_id"`
	OrganizationName string    `json:"organization_name"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
}

func (q *Queries) GetUsersByOrganizationAndRole(ctx context.Context, arg GetUsersByOrganizationAndRoleParams) ([]GetUsersByOrganizationAndRoleRow, error) {
	rows, err := q.query(ctx, q.getUsersByOrganizationAndRoleStmt, getUsersByOrganizationAndRole, arg.OrganizationID, arg.Role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByOrganizationAndRoleRow
	for rows.Next() {
		var i GetUsersByOrganizationAndRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.OrganizationID,
			&i.OrganizationName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersWithRole = `-- name: GetUsersWithRole :many
SELECT 
    u.id,
    u.username,
    u.email,
    u."firstName",
    u."lastName",
    u.role,
    u.organization_id,
    o.name AS organization_name,
    u.created_at,
    u.updated_at
FROM public."Users" u
JOIN public.organizations o ON u.organization_id = o.id
`

type GetUsersWithRoleRow struct {
	ID               int32     `json:"id"`
	Username         string    `json:"username"`
	Email            string    `json:"email"`
	FirstName        string    `json:"firstName"`
	LastName         string    `json:"lastName"`
	Role             string    `json:"role"`
	OrganizationID   int32     `json:"organization_id"`
	OrganizationName string    `json:"organization_name"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
}

func (q *Queries) GetUsersWithRole(ctx context.Context) ([]GetUsersWithRoleRow, error) {
	rows, err := q.query(ctx, q.getUsersWithRoleStmt, getUsersWithRole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersWithRoleRow
	for rows.Next() {
		var i GetUsersWithRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.OrganizationID,
			&i.OrganizationName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE public."Users"
SET
    "firstName" = $1,
    "lastName" = $2,
    username = $3,
    email = $4,
    role = $5,
    organization_id = $6
WHERE
    email = $7
`

type UpdateUserParams struct {
	FirstName      string `json:"firstName"`
	LastName       string `json:"lastName"`
	Username       string `json:"username"`
	Email          string `json:"email"`
	Role           string `json:"role"`
	OrganizationID int32  `json:"organization_id"`
	Email_2        string `json:"email_2"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Email,
		arg.Role,
		arg.OrganizationID,
		arg.Email_2,
	)
	return err
}
